How can you use the staging area to make sure you have one commit per logical change?
-we can keep changes temproraly at staging area till we make meaningful change then we commit it
so that we do not create much commits


run the command "git checkout "branch name" " to make commits on that branch not on the master brach.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- to try an experimental change without edit the original code 
-to make another beta version of of the code 
-to try to fix somthing and if it works then merge it with the master 


The full command Caroline types to see the visual representation of the commit history is git log --graph --oneline master coins.

How do the diagrams help you visualize the branch structure?
a lot
some notes:
when checkout a commit it gets out of the series as an alno commit without a branch and there is no record of it , however if u want to save the changes
or the commits made since that checkout u crate a new branch while the head is deattched.

git show {commit id}   ,shows the diff btw this commit and its parent without kowing its parents id.
git branch -d {branch name} , to delete a branch


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

the merge compine the existing lines before the merge and the new lines added by each branch ,,also delete the old lines 
that were deleted in one of the branch we are merging .


A note about git merge
git merge will also include the currently checked-out branch in the merged version. 
So if you have branch1 checked out, and you run git merge branch2 branch3,
 the merged version will combine branch1 as well as branch2 and branch3.
 That’s because the branch1 label will update after you make the merge commit,
 so it’s unlikely that you didn’t want the changes from branch1 included in the merge. 

---For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge.
 Which one you should check out depends on which branch label you want to point to the new commit.--- important

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, 
you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, 
you can simply git checkout branch1 and then type git merge branch2. 
The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter.
 The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.



What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

when using git auto merge conflicts may happen ,, therefore the conflict should be fixed manulaay and commited to the branch
we are doing the merge on(ex: if we want a branch to merge some new lines from the master branch then we solve the conflict and commit it to the subbranch"






